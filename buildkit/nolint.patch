Description: forcibly disable the linter in the dockerfile frontend (BUILDKIT_SYNTAX=khulnasoft/buildkit)
Author: Md Sulaiman <admwiggin@gmail.com>
Forwarded: no; upstream included this linter and enabled it by default intentionally

Ideally, this would be disabled in such a way that it was merely disabled-by-default and could be re-enabled at runtime (opt-in instead of opt-out), but the code is byzantine enough that I wasn't able to find a simple/clean way to accomplish that (and being able to do so does not appear to be a goal of upstream's implementation).

Alternatively, it would be interesting to try and remove *all* the code (instead of just making it no-op quickly), but the binary size reduction from doing so would probably not be large enough to justify the added burden of maintaining a more complex patch.

diff --git a/frontend/dockerfile/linter/linter.go b/frontend/dockerfile/linter/linter.go
index 890acc53b..6f7d19bf5 100644
--- a/frontend/dockerfile/linter/linter.go
+++ b/frontend/dockerfile/linter/linter.go
@@ -29,6 +29,7 @@ type Linter struct {
 }
 
 func New(config *Config) *Linter {
+	return nil // NO LINTING
 	toret := &Linter{
 		SkippedRules:      map[string]struct{}{},
 		ExperimentalRules: map[string]struct{}{},
@@ -48,6 +49,7 @@ func New(config *Config) *Linter {
 }
 
 func (lc *Linter) Run(rule LinterRuleI, location []parser.Range, txt ...string) {
+	return // NO LINTING
 	if lc == nil || lc.Warn == nil || rule.IsDeprecated() {
 		return
 	}
@@ -108,6 +110,7 @@ func (rule *LinterRule[F]) RuleName() string {
 }
 
 func (rule *LinterRule[F]) Run(warn LintWarnFunc, location []parser.Range, txt ...string) {
+	return // NO LINTING
 	if len(txt) == 0 {
 		txt = []string{rule.Description}
 	}
